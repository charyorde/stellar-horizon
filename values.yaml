environment: {}

stellarCoreUrl: http://stellar-core-http:11626

## Only used if postgresql.enabled is true
stellarCorePostgresDatabase: stellar-core

## Ingest data from Stellar Core (true/false)
stellarCoreIngest: true

postgresql:
  enabled: false
  postgresDatabase: stellar-horizon
  postgresUser: postgres
  # options from https://github.com/helm/charts/tree/master/stable/postgresql
  #postgresPassword: ""

postgresqlConnectTimeout: 5

## NOTE:
## existingDatabase is only used if postgresql.enabled is false
existingDatabase:
  passwordSecret:
    name: postgresql-postgresql
    key: postgresql-password
  ## NOTE:
  ## $(DATABASE_PASSWORD) is automatically replaced with the value of the passwordSecret
  url: postgresql://dbname=stellar-horizon user=postgres host=postgresql-postgresql password=$(DATABASE_PASSWORD)
  stellarUrl: postgresql://dbname=stellar-core user=postgres host=postgresql-postgresql password=$(DATABASE_PASSWORD)

image:
  repository: satoshipay/stellar-horizon
  tag: 'latest'
  # flavor: aws
  # flavor: gcloud
  pullPolicy: IfNotPresent

horizonService:
  type: LoadBalancer
  port: 8000
  # loadBalancerIP: 35.13.37.42
  # externalTrafficPolicy: Local

httpService:
  type: ClusterIP
  port: 8000

persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim: 

  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "ibmc-file-bronze"
  accessMode: ReadWriteMany
  size: 10Gi

  subPath: "stellar-horizon"
  mountPath: /data

  ## Annotations for the persistent volume claim
  annotations: {}

resources:
  requests:
    cpu: 100m
    memory: 512Mi

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  create: true
  name:
